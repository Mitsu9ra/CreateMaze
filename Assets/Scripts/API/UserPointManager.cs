using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Networking;
using System.Text;

// ‚Üê„Åì„ÅìÊ≥®ÊÑèÔºÅ Serializable „ÅØÂêÑ„ÇØ„É©„Çπ1               Âõû„Åö„Å§„Å†„ÅëÔºÅ
[Serializable]
public class UserPoint
{
    public int userId;
    public string userName;
    public int point;
}

[Serializable]
public class UserPointList
{
    public List<UserPoint> users;
}

public class UserPointManager
{
    private string baseUrl = "http://localhost:5000/api";

    // ‚úÖ „É©„É≥„Ç≠„É≥„Ç∞È†Ü„Å´ÂÖ®„É¶„Éº„Ç∂„Éº„ÅÆ„Éù„Ç§„É≥„Éà„ÇíÂèñÂæó
    public IEnumerator GetAllUserPointsSorted(Action<List<UserPoint>> onSuccess, Action<string> onError)
    {
        string url = $"{baseUrl}/userPoints";
        UnityWebRequest request = UnityWebRequest.Get(url);
        yield return request.SendWebRequest();

        if (request.result == UnityWebRequest.Result.Success)
        {
            try
            {
                string json = "{\"users\":" + request.downloadHandler.text + "}";
                UserPointList data = JsonUtility.FromJson<UserPointList>(json);

                // üîΩ „ÇΩ„Éº„ÉàÔºà„Éù„Ç§„É≥„ÉàÈôçÈ†ÜÔºâ
                data.users.Sort((a, b) => b.point.CompareTo(a.point));

                onSuccess?.Invoke(data.users);
            }
            catch (Exception e)
            {
                onError?.Invoke("JSON„Éë„Éº„Çπ„Ç®„É©„Éº: " + e.Message);
            }
        }
        else
        {
            onError?.Invoke("ÈÄö‰ø°„Ç®„É©„Éº: " + request.error);
        }
    }

    // ‚úÖ „Çπ„Ç≥„Ç¢ÁôªÈå≤ÔºàÊñ∞Ë¶è or Êõ¥Êñ∞Ôºâ
    public IEnumerator UpdateUserPoint(int userId, string userName, int point, Action<UserPoint> onSuccess, Action<string> onError)
    {
        string url = $"{baseUrl}/updatePoint";
        string json = $"{{\"userId\":{userId},\"userName\":\"{userName}\",\"point\":{point}}}";

        UnityWebRequest req = new UnityWebRequest(url, "POST");
        byte[] body = Encoding.UTF8.GetBytes(json);
        req.uploadHandler = new UploadHandlerRaw(body);
        req.downloadHandler = new DownloadHandlerBuffer();
        req.SetRequestHeader("Content-Type", "application/json");

        yield return req.SendWebRequest();

        if (req.result == UnityWebRequest.Result.Success)
        {
            try
            {
                UserPoint data = JsonUtility.FromJson<UserPoint>(req.downloadHandler.text);
                onSuccess?.Invoke(data);
            }
            catch (Exception e)
            {
                onError?.Invoke("JSON„Éë„Éº„Çπ„Ç®„É©„Éº: " + e.Message);
            }
        }
        else
        {
            onError?.Invoke("ÈÄö‰ø°„Ç®„É©„Éº: " + req.error);
        }
    }
}
